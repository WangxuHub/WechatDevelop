<%-- 
Name:表业务逻辑类模板
Author:黄小云
Description:生成表业务逻辑类的模板
--%>
<%@ CodeTemplate Language="C#" ResponseEncoding="UTF-8" TargetLanguage="Text" Src="" Inherits="" Debug="False" Description="Template description here." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the stored procedures should be based on." %>
<%@ Property Name="NameSpacePrefix" Type="System.String" Default="" Optional="True" Category="Strings" Description="命名空间前缀" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Data" %>
<% collectionString="List<"+GetPasicString(SourceTable.Name)+">"; %>
using System;
using <%=NameSpacePrefix%>DAL;
using <%=NameSpacePrefix%>Model;
using System.Collections;
using System.Collections.Generic;

namespace <%=NameSpacePrefix%>BLL
{
    public partial class B<%= GetPasicString(SourceTable.Name) %>
	{
	    #region 插入实体操作部份
	    /// <summary>
        /// 插入实体
        /// </summary>
        /// <param name="<%= GetCamelString(SourceTable.Name) %>">实体类对象</param>
        /// <returns>标识列值或影响的记录行数</returns>
	    public static <%=GetInsertReturnType()%> Insert(<%= GetPasicString(SourceTable.Name)+" "+GetCamelString(SourceTable.Name) %>)
		{
			return D<%= GetPasicString(SourceTable.Name)+".Insert("+GetCamelString(SourceTable.Name)+")" %>;
		}
		#endregion
		
		#region 删除实体操作
		<% if(ExistPK()) {%>
		/// <summary>
        /// 删除实体
        /// </summary>
        /// <param name="<%= GetCamelString(SourceTable.Name) %>">实体类对象</param>
        /// <returns>影响的记录行数</returns>
        public static int Delete(<%= GetPasicString(SourceTable.Name)+" "+GetCamelString(SourceTable.Name) %>)
        {
            return D<%= GetPasicString(SourceTable.Name)+".Delete("+GetCamelString(SourceTable.Name)+")" %>;
        }
		<% } %><%--结束判断是否存在主键--%>
		/// <summary>
        /// 根据对象查询语句删除
        /// </summary>
        /// <param name="oql">对象查询语句</param>
        /// <param name="parameters">参数列表</param>
        /// <returns>影响的记录行数</returns>
        public static int Delete(string oql, ParameterList parameters)
        {
            return D<%= GetPasicString(SourceTable.Name) %>.Delete(oql,parameters);
        }
		#endregion
		
		#region 更新实体操作
		<% if(ExistPK()) {%>
				
		/// <summary>
        /// 更新实体
        /// </summary>
        /// <param name="<%= GetCamelString(SourceTable.Name) %>">实体类对象</param>
        /// <returns>影响的记录行数</returns>
	    public static int Update(<%= GetPasicString(SourceTable.Name)+" "+GetCamelString(SourceTable.Name) %>)
		{
		    return D<%= GetPasicString(SourceTable.Name)+".Update("+GetCamelString(SourceTable.Name)+")" %>;
		}
		<% } %>
		
		/// <summary>
        /// 根据对象查询语句更新实体
        /// </summary>
        /// <param name="oql">对象查询语句</param>
        /// <param name="parameters">参数列表</param>
        /// <returns>影响的记录行数</returns>
        public static int Update(string oql, ParameterList parameters)
        {
            return D<%= GetPasicString(SourceTable.Name) %>.Update(oql,parameters);
        }
		#endregion
		
		#region 查询实体集合
		/// <summary>
        /// \查询实体集合
        /// </summary>
        /// <returns>实体类对象集合</returns>
        public static <%= collectionString %> Select()
        {
			return D<%= GetPasicString(SourceTable.Name) %>.Select();
        }
		/// <summary>
        /// 递归查询实体集合
        /// </summary>
		/// <param name="recursiveType">递归类型</param>
        /// <param name="recursiveDepth">递归深度</param>
        /// <returns>实体类对象集合</returns>
        public static <%= collectionString %> Select(RecursiveType recursiveType, int recursiveDepth)
        {
			return D<%= GetPasicString(SourceTable.Name) %>.Select(recursiveType, recursiveDepth);
        }
		
		/// <summary>
        /// 根据对象查询语句查询实体集合
        /// </summary>
        /// <param name="oql">对象查询语句</param>
        /// <param name="parameters">参数列表</param>
        /// <returns>实体类对象集合</returns>
        public static <%= collectionString %> Select(string oql, ParameterList parameters)
        {
			return D<%= GetPasicString(SourceTable.Name) %>.Select(oql, parameters);
        }
		
		/// <summary>
        /// 根据对象查询语句递归查询实体集合
        /// </summary>
        /// <param name="oql">对象查询语句</param>
        /// <param name="parameters">参数列表</param>
		/// <param name="recursiveType">递归类型</param>
        /// <param name="recursiveDepth">递归深度</param>
        /// <returns>实体类对象集合</returns>
        public static <%= collectionString %> Select(string oql, ParameterList parameters,RecursiveType recursiveType, int recursiveDepth)
        {
			return D<%= GetPasicString(SourceTable.Name) %>.Select(oql, parameters, recursiveType, recursiveDepth);
        }
		#endregion
		
		#region 查询单个实体
		/// <summary>
        /// 更据对象查询语句查询单个实体
        /// </summary>
        /// <param name="oql">对象查询语句</param>
        /// <param name="parameters">参数列表</param>
        /// <returns>实体对象</returns>
        public static <%= GetPasicString(SourceTable.Name) %> SelectSingle(string oql, ParameterList parameters)
        {
             return D<%= GetPasicString(SourceTable.Name) %>.SelectSingle(oql, parameters);
        }
		/// <summary>
        /// 更据对象查询语句递归查询单个实体
        /// </summary>
        /// <param name="oql">对象查询语句</param>
        /// <param name="parameters">参数列表</param>
		/// <param name="recursiveType">递归类型</param>
        /// <param name="recursiveDepth">递归深度</param>
        /// <returns>实体对象</returns>
        public static <%= GetPasicString(SourceTable.Name) %> SelectSingle(string oql, ParameterList parameters, RecursiveType recursiveType, int recursiveDepth)
        {
		    return D<%= GetPasicString(SourceTable.Name) %>.SelectSingle(oql, parameters, recursiveType, recursiveDepth);
		}
		
		<% if(ExistPK()) {%>
		/// <summary>
        /// 按主键字段查询特定实体
        /// </summary>
        /// <param name="<%=GetCamelString(GetPrimaryKeyColumn().Name)%>">主键值</param>
        /// <returns>实体类对象</returns>
        public static <%= GetPasicString(SourceTable.Name) %> SelectSingle(<%=GetDataTypeString(GetPrimaryKeyColumn().DataType)+" "+GetCamelString(GetPrimaryKeyColumn().Name)%>)
        {
            return D<%= GetPasicString(SourceTable.Name) %>.SelectSingle(<%=GetCamelString(GetPrimaryKeyColumn().Name)%>);
        }
		
		/// <summary>
        /// 更据主键递归查询单个实体
        /// </summary>
		/// <param name="recursiveType">递归类型</param>
        /// <param name="recursiveDepth">递归深度</param>
        /// <returns>实体对象</returns>
        public static <%= GetPasicString(SourceTable.Name) %> SelectSingle(<%=GetDataTypeString(GetPrimaryKeyColumn().DataType)+" "+GetCamelString(GetPrimaryKeyColumn().Name)%>, RecursiveType recursiveType, int recursiveDepth)
        {
		    return D<%= GetPasicString(SourceTable.Name) %>.SelectSingle(<%=GetCamelString(GetPrimaryKeyColumn().Name)%>, recursiveType, recursiveDepth);
		}
		<%}%>
		#endregion
    }
}
<script runat="template">
private string collectionString="";
public string GetDataTypeString(DbType dbType)
{
	switch(dbType)
	{
		case DbType.Boolean: return "bool?";
	    case DbType.Byte:return "byte?";
		case DbType.SByte: return "sbyt?";
		case DbType.Int16:return "short?";
		case DbType.Int32:return "int?";
		case DbType.Int64:return "long?";
		case DbType.DateTime:case DbType.Date:return "DateTime?";
		case DbType.Single:return "float?";
		case DbType.Double:return "double?";
		case DbType.UInt16: return "ushort?";
		case DbType.UInt32: return "uint?";
		case DbType.UInt64: return "ulong?";
		case DbType.Currency:case DbType.Decimal:case DbType.VarNumeric:return "Decimal?";
		case DbType.Object: return "object";
		case DbType.Binary:return "byte[]";
		case DbType.Time: return "TimeSpan";
		default:return "string";
	}
}
//获取主键字段名
public ColumnSchema GetPrimaryKeyColumn()
{
	foreach(ColumnSchema column in SourceTable.Columns)
	{
		if(column.IsPrimaryKeyMember)
		  return column;
	}
	return null;
}
//获取Pasic规则的字符串
public string GetPasicString(string var)
{
	string pasicString="";
	string[] strList=var.Split('_');
	foreach(string str in strList)
	{
		pasicString+=str.Substring(0,1).ToUpper()+str.Substring(1);
	}
	return pasicString;
}
//获取Camel规则的字符串
public string GetCamelString(string var)
{
	
	string[] strList=var.Split('_');
	string camelString=strList[0].Substring(0,1).ToLower()+strList[0].Substring(1);
	for(int i=1; i<strList.Length; i++)
	{
		string str=strList[i];
		camelString+=str.Substring(0,1).ToUpper()+str.Substring(1);
	}
	if(camelString=="class")
	    camelString="cls";
	return camelString;
}
//判断是否存在主键
public bool ExistPK()
{
	foreach(ColumnSchema column in SourceTable.Columns)
	{
		if(column.IsPrimaryKeyMember)
		  return true;
	}
	return false;
}

//获取新增操作后的返回值，当前的主键ID，csy
public string GetInsertReturnType()
{
    ColumnSchema priKey=GetPrimaryKeyColumn();
    
    
	switch(priKey.DataType)
	{
		case DbType.Int16:return "short";
		case DbType.Int32:return "int";
		case DbType.Int64:return "long";
		case DbType.Single:return "float";
		case DbType.Double:return "double";
		case DbType.UInt16: return "ushort";
		case DbType.UInt32: return "uint";
		case DbType.UInt64: return "ulong";
        case DbType.Guid:return "Guid";
		default:return "string";
	}
}
</script>